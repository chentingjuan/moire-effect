{"id":"node_modules/static-eval/index.js","dependencies":[{"name":"/Users/juan/Projects/moire-effect/package.json","includedInParent":true,"mtime":1641979595379},{"name":"/Users/juan/Projects/moire-effect/node_modules/static-eval/package.json","includedInParent":true,"mtime":1641977399964},{"name":"escodegen","loc":{"line":1,"column":22},"parent":"/Users/juan/Projects/moire-effect/node_modules/static-eval/index.js","resolved":"/Users/juan/Projects/moire-effect/node_modules/escodegen/escodegen.js"}],"generated":{"js":"var unparse = require('escodegen').generate;\n\nmodule.exports = function (ast, vars, opts) {\n    if(!opts) opts = {};\n    var rejectAccessToMethodsOnFunctions = !opts.allowAccessToMethodsOnFunctions;\n\n    if (!vars) vars = {};\n    var FAIL = {};\n\n    var result = (function walk (node, noExecute) {\n        if (node.type === 'Literal') {\n            return node.value;\n        }\n        else if (node.type === 'UnaryExpression'){\n            var val = walk(node.argument, noExecute)\n            if (node.operator === '+') return +val\n            if (node.operator === '-') return -val\n            if (node.operator === '~') return ~val\n            if (node.operator === '!') return !val\n            return FAIL\n        }\n        else if (node.type === 'ArrayExpression') {\n            var xs = [];\n            for (var i = 0, l = node.elements.length; i < l; i++) {\n                var x = walk(node.elements[i], noExecute);\n                if (x === FAIL) return FAIL;\n                xs.push(x);\n            }\n            return xs;\n        }\n        else if (node.type === 'ObjectExpression') {\n            var obj = {};\n            for (var i = 0; i < node.properties.length; i++) {\n                var prop = node.properties[i];\n                var value = prop.value === null\n                    ? prop.value\n                    : walk(prop.value, noExecute)\n                ;\n                if (value === FAIL) return FAIL;\n                obj[prop.key.value || prop.key.name] = value;\n            }\n            return obj;\n        }\n        else if (node.type === 'BinaryExpression' ||\n                 node.type === 'LogicalExpression') {\n            var op = node.operator;\n\n            if (op === '&&') {\n                var l = walk(node.left);\n                if (l === FAIL) return FAIL;\n                if (!l) return l;\n                var r = walk(node.right);\n                if (r === FAIL) return FAIL;\n                return r;\n            }\n            else if (op === '||') {\n                var l = walk(node.left);\n                if (l === FAIL) return FAIL;\n                if (l) return l;\n                var r = walk(node.right);\n                if (r === FAIL) return FAIL;\n                return r;\n            }\n\n            var l = walk(node.left, noExecute);\n            if (l === FAIL) return FAIL;\n            var r = walk(node.right, noExecute);\n            if (r === FAIL) return FAIL;\n\n            if (op === '==') return l == r;\n            if (op === '===') return l === r;\n            if (op === '!=') return l != r;\n            if (op === '!==') return l !== r;\n            if (op === '+') return l + r;\n            if (op === '-') return l - r;\n            if (op === '*') return l * r;\n            if (op === '/') return l / r;\n            if (op === '%') return l % r;\n            if (op === '<') return l < r;\n            if (op === '<=') return l <= r;\n            if (op === '>') return l > r;\n            if (op === '>=') return l >= r;\n            if (op === '|') return l | r;\n            if (op === '&') return l & r;\n            if (op === '^') return l ^ r;\n\n            return FAIL;\n        }\n        else if (node.type === 'Identifier') {\n            if ({}.hasOwnProperty.call(vars, node.name)) {\n                return vars[node.name];\n            }\n            else return FAIL;\n        }\n        else if (node.type === 'ThisExpression') {\n            if ({}.hasOwnProperty.call(vars, 'this')) {\n                return vars['this'];\n            }\n            else return FAIL;\n        }\n        else if (node.type === 'CallExpression') {\n            var callee = walk(node.callee, noExecute);\n            if (callee === FAIL) return FAIL;\n            if (typeof callee !== 'function') return FAIL;\n\n\n            var ctx = node.callee.object ? walk(node.callee.object, noExecute) : FAIL;\n            if (ctx === FAIL) ctx = null;\n\n            var args = [];\n            for (var i = 0, l = node.arguments.length; i < l; i++) {\n                var x = walk(node.arguments[i], noExecute);\n                if (x === FAIL) return FAIL;\n                args.push(x);\n            }\n\n            if (noExecute) {\n                return undefined;\n            }\n\n            return callee.apply(ctx, args);\n        }\n        else if (node.type === 'MemberExpression') {\n            var obj = walk(node.object, noExecute);\n            if((obj === FAIL) || (\n                (typeof obj == 'function') && rejectAccessToMethodsOnFunctions\n            )){\n                return FAIL;\n            }\n            if (node.property.type === 'Identifier' && !node.computed) {\n                if (isUnsafeProperty(node.property.name)) return FAIL;\n                return obj[node.property.name];\n            }\n            var prop = walk(node.property, noExecute);\n            if (prop === null || prop === FAIL) return FAIL;\n            if (isUnsafeProperty(prop)) return FAIL;\n            return obj[prop];\n        }\n        else if (node.type === 'ConditionalExpression') {\n            var val = walk(node.test, noExecute)\n            if (val === FAIL) return FAIL;\n            return val ? walk(node.consequent) : walk(node.alternate, noExecute)\n        }\n        else if (node.type === 'ExpressionStatement') {\n            var val = walk(node.expression, noExecute)\n            if (val === FAIL) return FAIL;\n            return val;\n        }\n        else if (node.type === 'ReturnStatement') {\n            return walk(node.argument, noExecute)\n        }\n        else if (node.type === 'FunctionExpression') {\n            var bodies = node.body.body;\n\n            // Create a \"scope\" for our arguments\n            var oldVars = {};\n            Object.keys(vars).forEach(function(element){\n                oldVars[element] = vars[element];\n            })\n\n            for(var i=0; i<node.params.length; i++){\n                var key = node.params[i];\n                if(key.type == 'Identifier'){\n                  vars[key.name] = null;\n                }\n                else return FAIL;\n            }\n            for(var i in bodies){\n                if(walk(bodies[i], true) === FAIL){\n                    return FAIL;\n                }\n            }\n            // restore the vars and scope after we walk\n            vars = oldVars;\n\n            var keys = Object.keys(vars);\n            var vals = keys.map(function(key) {\n                return vars[key];\n            });\n            return Function(keys.join(', '), 'return ' + unparse(node)).apply(null, vals);\n        }\n        else if (node.type === 'TemplateLiteral') {\n            var str = '';\n            for (var i = 0; i < node.expressions.length; i++) {\n                str += walk(node.quasis[i], noExecute);\n                str += walk(node.expressions[i], noExecute);\n            }\n            str += walk(node.quasis[i], noExecute);\n            return str;\n        }\n        else if (node.type === 'TaggedTemplateExpression') {\n            var tag = walk(node.tag, noExecute);\n            var quasi = node.quasi;\n            var strings = quasi.quasis.map(walk);\n            var values = quasi.expressions.map(walk);\n            return tag.apply(null, [strings].concat(values));\n        }\n        else if (node.type === 'TemplateElement') {\n            return node.value.cooked;\n        }\n        else return FAIL;\n    })(ast);\n\n    return result === FAIL ? undefined : result;\n};\n\nfunction isUnsafeProperty(name) {\n    return name === 'constructor' || name === '__proto__';\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/static-eval/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/static-eval/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}}],"sources":{"node_modules/static-eval/index.js":"var unparse = require('escodegen').generate;\n\nmodule.exports = function (ast, vars, opts) {\n    if(!opts) opts = {};\n    var rejectAccessToMethodsOnFunctions = !opts.allowAccessToMethodsOnFunctions;\n\n    if (!vars) vars = {};\n    var FAIL = {};\n\n    var result = (function walk (node, noExecute) {\n        if (node.type === 'Literal') {\n            return node.value;\n        }\n        else if (node.type === 'UnaryExpression'){\n            var val = walk(node.argument, noExecute)\n            if (node.operator === '+') return +val\n            if (node.operator === '-') return -val\n            if (node.operator === '~') return ~val\n            if (node.operator === '!') return !val\n            return FAIL\n        }\n        else if (node.type === 'ArrayExpression') {\n            var xs = [];\n            for (var i = 0, l = node.elements.length; i < l; i++) {\n                var x = walk(node.elements[i], noExecute);\n                if (x === FAIL) return FAIL;\n                xs.push(x);\n            }\n            return xs;\n        }\n        else if (node.type === 'ObjectExpression') {\n            var obj = {};\n            for (var i = 0; i < node.properties.length; i++) {\n                var prop = node.properties[i];\n                var value = prop.value === null\n                    ? prop.value\n                    : walk(prop.value, noExecute)\n                ;\n                if (value === FAIL) return FAIL;\n                obj[prop.key.value || prop.key.name] = value;\n            }\n            return obj;\n        }\n        else if (node.type === 'BinaryExpression' ||\n                 node.type === 'LogicalExpression') {\n            var op = node.operator;\n\n            if (op === '&&') {\n                var l = walk(node.left);\n                if (l === FAIL) return FAIL;\n                if (!l) return l;\n                var r = walk(node.right);\n                if (r === FAIL) return FAIL;\n                return r;\n            }\n            else if (op === '||') {\n                var l = walk(node.left);\n                if (l === FAIL) return FAIL;\n                if (l) return l;\n                var r = walk(node.right);\n                if (r === FAIL) return FAIL;\n                return r;\n            }\n\n            var l = walk(node.left, noExecute);\n            if (l === FAIL) return FAIL;\n            var r = walk(node.right, noExecute);\n            if (r === FAIL) return FAIL;\n\n            if (op === '==') return l == r;\n            if (op === '===') return l === r;\n            if (op === '!=') return l != r;\n            if (op === '!==') return l !== r;\n            if (op === '+') return l + r;\n            if (op === '-') return l - r;\n            if (op === '*') return l * r;\n            if (op === '/') return l / r;\n            if (op === '%') return l % r;\n            if (op === '<') return l < r;\n            if (op === '<=') return l <= r;\n            if (op === '>') return l > r;\n            if (op === '>=') return l >= r;\n            if (op === '|') return l | r;\n            if (op === '&') return l & r;\n            if (op === '^') return l ^ r;\n\n            return FAIL;\n        }\n        else if (node.type === 'Identifier') {\n            if ({}.hasOwnProperty.call(vars, node.name)) {\n                return vars[node.name];\n            }\n            else return FAIL;\n        }\n        else if (node.type === 'ThisExpression') {\n            if ({}.hasOwnProperty.call(vars, 'this')) {\n                return vars['this'];\n            }\n            else return FAIL;\n        }\n        else if (node.type === 'CallExpression') {\n            var callee = walk(node.callee, noExecute);\n            if (callee === FAIL) return FAIL;\n            if (typeof callee !== 'function') return FAIL;\n\n\n            var ctx = node.callee.object ? walk(node.callee.object, noExecute) : FAIL;\n            if (ctx === FAIL) ctx = null;\n\n            var args = [];\n            for (var i = 0, l = node.arguments.length; i < l; i++) {\n                var x = walk(node.arguments[i], noExecute);\n                if (x === FAIL) return FAIL;\n                args.push(x);\n            }\n\n            if (noExecute) {\n                return undefined;\n            }\n\n            return callee.apply(ctx, args);\n        }\n        else if (node.type === 'MemberExpression') {\n            var obj = walk(node.object, noExecute);\n            if((obj === FAIL) || (\n                (typeof obj == 'function') && rejectAccessToMethodsOnFunctions\n            )){\n                return FAIL;\n            }\n            if (node.property.type === 'Identifier' && !node.computed) {\n                if (isUnsafeProperty(node.property.name)) return FAIL;\n                return obj[node.property.name];\n            }\n            var prop = walk(node.property, noExecute);\n            if (prop === null || prop === FAIL) return FAIL;\n            if (isUnsafeProperty(prop)) return FAIL;\n            return obj[prop];\n        }\n        else if (node.type === 'ConditionalExpression') {\n            var val = walk(node.test, noExecute)\n            if (val === FAIL) return FAIL;\n            return val ? walk(node.consequent) : walk(node.alternate, noExecute)\n        }\n        else if (node.type === 'ExpressionStatement') {\n            var val = walk(node.expression, noExecute)\n            if (val === FAIL) return FAIL;\n            return val;\n        }\n        else if (node.type === 'ReturnStatement') {\n            return walk(node.argument, noExecute)\n        }\n        else if (node.type === 'FunctionExpression') {\n            var bodies = node.body.body;\n\n            // Create a \"scope\" for our arguments\n            var oldVars = {};\n            Object.keys(vars).forEach(function(element){\n                oldVars[element] = vars[element];\n            })\n\n            for(var i=0; i<node.params.length; i++){\n                var key = node.params[i];\n                if(key.type == 'Identifier'){\n                  vars[key.name] = null;\n                }\n                else return FAIL;\n            }\n            for(var i in bodies){\n                if(walk(bodies[i], true) === FAIL){\n                    return FAIL;\n                }\n            }\n            // restore the vars and scope after we walk\n            vars = oldVars;\n\n            var keys = Object.keys(vars);\n            var vals = keys.map(function(key) {\n                return vars[key];\n            });\n            return Function(keys.join(', '), 'return ' + unparse(node)).apply(null, vals);\n        }\n        else if (node.type === 'TemplateLiteral') {\n            var str = '';\n            for (var i = 0; i < node.expressions.length; i++) {\n                str += walk(node.quasis[i], noExecute);\n                str += walk(node.expressions[i], noExecute);\n            }\n            str += walk(node.quasis[i], noExecute);\n            return str;\n        }\n        else if (node.type === 'TaggedTemplateExpression') {\n            var tag = walk(node.tag, noExecute);\n            var quasi = node.quasi;\n            var strings = quasi.quasis.map(walk);\n            var values = quasi.expressions.map(walk);\n            return tag.apply(null, [strings].concat(values));\n        }\n        else if (node.type === 'TemplateElement') {\n            return node.value.cooked;\n        }\n        else return FAIL;\n    })(ast);\n\n    return result === FAIL ? undefined : result;\n};\n\nfunction isUnsafeProperty(name) {\n    return name === 'constructor' || name === '__proto__';\n}\n"},"lineCount":210}},"error":null,"hash":"44ed881f726284a188086aee8dbacb96","cacheData":{"env":{}}}